{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","book","chapter","verseS","verseE","view","bookData","verseData","_loadingOT","asyncToGenerator","regenerator_default","a","mark","_callee","temp","i","wrap","_context","prev","next","push","bible","version","setState","book_name","stop","_loagingNT","_callee2","_context2","_selectBook","event","n","target","id","bookName","_displayData","map","react_default","createElement","className","book_nr","key","onClick","_chapterVerse","onSubmit","_result","type","pattern","name","required","content","value","preventDefault","ddata","formData","FormData","cnum","Number","get","vsnum","venum","maxChapter","keys","length","alert","maxVerse","loaded","_words","tempV","verse_nr","verse","_copyData","copyText","document","querySelector","selection","window","getSelection","range","createRange","selectNodeContents","removeAllRanges","addRange","execCommand","bind","assertThisInitialized","title","align","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.57e28b77.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport bible from \"./bible.json\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    data: [],\n    book: 0,\n    chapter: 0,\n    verseS: 0,\n    verseE: 0,\n    view: false,\n    bookData: [],\n    verseData: []\n  };\n\n  constructor() {\n    super();\n    this._result = this._result.bind(this);\n  }\n\n  componentDidMount() {\n    document.title = \"바이블 검색 페이지\";\n  }\n\n  //구약 성경 불러와서 state data 갱신\n  _loadingOT = async () => {\n    let temp = [];\n    for (let i = 1; i <= 39; ++i) {\n      temp.push(bible[0].version[i]);\n    }\n\n    this.setState({\n      data: temp,\n      book: 0,\n      chapter: 0,\n      verseS: 0,\n      verseE: 0,\n      view: false,\n      verseData: [],\n      book_name: null\n    });\n  };\n\n  //신약 성경 불러와서 state data 갱신\n  _loagingNT = async () => {\n    let temp = [];\n    for (let i = 40; i <= 66; ++i) {\n      temp.push(bible[0].version[i]);\n    }\n    this.setState({\n      data: temp,\n      book: 0,\n      chapter: 0,\n      verseS: 0,\n      verseE: 0,\n      view: false,\n      verseData: []\n    });\n  };\n\n  //성경 선택하면 state에 성경 이름과 id를 갱신\n  _selectBook = event => {\n    let n = event.target.id;\n    if (n > 39) {\n      n = n - 40;\n    } else {\n      n = n - 1;\n    }\n    this.setState({\n      book: event.target.id,\n      bookName: this.state.data[n].book_name,\n      bookData:this.state.data[n]\n    });\n  };\n\n  //구약, 신약 선택 후 각 성경 리스트 버튼으로 리턴\n  _displayData = () => {\n    const items = this.state.data.map(data => {\n      return (\n        <button className=\"book\" id={data.book_nr} key={data.book_nr} onClick={this._selectBook}>\n          {data.book_name}\n        </button>\n      );\n    });\n    return items;\n  };\n\n  //성경을 선택하면 장, 절 입력 화면 출력\n  _chapterVerse = () => {\n    return <form onSubmit={this._result}>\n        <label>\n          <label id=\"bookinfo\">{this.state.bookName}</label>\n          <input type=\"number\" pattern=\"\\d*\" name=\"chapterNum\" required=\"required\" content=\"user-scalable=no\" />장\n        </label>\n        <label>\n          <input type=\"number\" pattern=\"\\d*\" name=\"verseStart\" required=\"required\" content=\"user-scalable=no\" />절~\n        </label>\n        <label>\n          <input type=\"number\" pattern=\"\\d*\" name=\"verseEnd\" required=\"required\" content=\"user-scalable=no\" />절\n        </label>\n        <input type=\"submit\" value=\"보기\" />\n      </form>;\n  };\n\n  _result = (event) => {\n    event.preventDefault();\n    const ddata = this.state.bookData;\n    //입력 form에서 입력 데이터 가져오기\n    let formData = new FormData(event.target);\n\n    //입력화면에 있는 장, 시작 절, 끝 절 값 가져오기\n    let cnum = Number(formData.get(\"chapterNum\"));\n    let vsnum = Number(formData.get(\"verseStart\"));\n    let venum = Number(formData.get(\"verseEnd\"));\n\n    //입력한 성경이 몇 장으로 이루어져있는지 정보 가져오기\n    let maxChapter = Number(Object.keys(ddata.book).length);\n\n    //입력이 올바르지 않을 시 alert출력 및 값 재설정\n    if (cnum <= 0) {\n      alert(\"올바르지 않은 입력입니다.\");\n      return;\n    }\n    //입력한 장이 해당 성경의 장수보다 높으면 마지막 장을 출력하도록 갱신\n     if (cnum > maxChapter) {\n       cnum = maxChapter;\n     }\n\n    //입력한 장이 몇 절로 이루어졌는지 정보 가져오기\n    let maxVerse = Number(Object.keys(ddata.book[cnum].chapter).length);\n\n    //입력이 올바르지 않을시 alert출력 및 값 재설정\n    if (vsnum <= 0 || vsnum > venum ) {\n      alert(\"올바르지 않은 입력입니다.\");\n      return;\n    }\n\n    let loaded = [];\n\n    //입력한 절이 해당 장의 절수보다 높으면 마지막 절을 출력하도록 갱신\n    if (venum > maxVerse) {\n      venum = maxVerse;\n    }\n    if(vsnum > maxVerse){\n      vsnum = maxVerse;\n    }\n\n    let i = vsnum;\n    while (i <= venum) {\n      loaded.push(ddata.book[cnum].chapter[i]);\n      i++;\n    }\n    //bible.json파일에 있는 data에서 필요한 구절들을 배열에 넣고 state에 갱신\n    this.setState({\n      chapter: cnum,\n      verseS: vsnum,\n      verseE: venum,\n      verseData: loaded,\n      view: true\n    });\n\n  };\n\n  //state에 있는 data div tag에 리턴\n  _words = () => {\n    const items = this.state.verseData.map(tempV => {\n      return (\n        <div key={tempV.verse_nr}>{tempV.verse_nr}. {tempV.verse}</div>\n      );\n    });\n    return items;\n  };\n\n  //출력된 구절 클립보드에 복사하기\n  _copyData = () => {\n    let copyText = document.querySelector(\".verseDisplay\");\n    let selection = window.getSelection();\n    let range = document.createRange();\n    range.selectNodeContents(copyText);\n    selection.removeAllRanges();\n    selection.addRange(range);\n    document.execCommand(\"Copy\");\n    alert(\"클립보드에 복사 되었습니다!\");\n  };\n\n  render() {\n    return <div className=\"AppDisplay\" align=\"center\" >\n        <button id=\"ot\" onClick={this._loadingOT}>\n          구약\n        </button>\n        <button id=\"nt\" onClick={this._loagingNT}>\n          신약\n        </button>\n        <div className=\"books\">\n          {this.state.data.length !== 0 ? this._displayData() : null}\n          {this.state.book !== 0 ? this._chapterVerse() : null}\n          {this.state.book !== 0 ? <p id=\"lastinfo\" align=\"left\">\n                해당 성경의 장 혹은 절 보다 큰 수 입력시 마지막 장 혹은 마지막 절까지 출력\n              </p> : null}\n        </div>\n        {this.state.view ? <button id=\"copy\" onClick={this._copyData}>\n              전체복사\n            </button> : null}\n        <div className=\"verseDisplay\" align=\"left\">\n          <br />\n          {this._words()}\n          {this.state.view && this.state.verseS !== this.state.verseE ? <p id=\"info\">\n                {this.state.bookName} {this.state.chapter}:{this.state.verseS}\n                ~{this.state.verseE} KRV\n              </p> : null}\n          {this.state.view && this.state.verseS === this.state.verseE ? <p id=\"info\">\n                {this.state.bookName} {this.state.chapter}:{this.state.verseS} KRV\n              </p> : null}\n          <br />\n          <br />\n        </div>\n        <p align=\"left\">\n          성경본문은 getbible.net에서 개역한글판을 가져왔으며 오류 및 수정은 jungdw0624@gmail.com으로\n          알려주시기 바랍니다.\n        </p>\n      </div>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}