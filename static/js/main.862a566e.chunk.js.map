{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","book","chapter","verseS","verseE","view","verseData","_selectBook","event","n","target","id","setState","bookName","book_name","_loadingOT","asyncToGenerator","regenerator_default","a","mark","_callee","temp","i","wrap","_context","prev","next","push","bible","version","stop","_loagingNT","_callee2","_context2","_displayData","map","react_default","createElement","className","book_nr","key","onClick","_chapterVerse","onSubmit","_result","type","name","required","value","_ref3","_callee3","formData","bnum","cnum","vsnum","venum","maxChapter","maxVerse","_context3","preventDefault","FormData","get","keys","length","alert","abrupt","_x","apply","arguments","_words","verse_nr","verse","_copyData","copyText","document","querySelector","selection","window","getSelection","range","createRange","selectNodeContents","removeAllRanges","addRange","execCommand","bind","assertThisInitialized","title","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.862a566e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport bible from \"./bible.json\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    data: [],\n    book: 0,\n    chapter: 0,\n    verseS: 0,\n    verseE: 0,\n    view: false,\n    verseData: []\n  };\n\n  constructor() {\n    super();\n    this._result = this._result.bind(this);\n  }\n\n  componentDidMount() {\n    document.title = \"바이블 검색 페이지\";\n  }\n\n  _selectBook = event => {\n    var n = event.target.id;\n    if(n>39){\n      n = n-40;\n    } else {\n      n = n-1;\n    }\n    this.setState({\n      book: event.target.id,\n      bookName: this.state.data[n].book_name\n    });\n  };\n\n  _loadingOT = async () => {\n    var temp = [];\n    for (var i = 1; i <= 39; ++i) {\n      temp.push(bible[0].version[i]);\n    }\n\n    this.setState({\n      data: temp,\n      book: 0,\n      chapter: 0,\n      verseS: 0,\n      verseE: 0,\n      view: false,\n      verseData: []\n    });\n  };\n\n  _loagingNT = async () => {\n    var temp = [];\n    for (var i = 40; i <= 66; ++i) {\n      temp.push(bible[0].version[i]);\n    }\n    this.setState({\n      data: temp,\n      book: 0,\n      chapter: 0,\n      verseS: 0,\n      verseE: 0,\n      view: false,\n      verseData: []\n    });\n  };\n\n  _displayData = () => {\n    const items = this.state.data.map(data => {\n      return (\n        <button className=\"book\" id={data.book_nr} key={data.book_nr} onClick={this._selectBook}>\n          {data.book_name}\n        </button>\n      );\n    });\n    return items;\n  };\n\n  _chapterVerse = () => {\n    return (\n      <form onSubmit={this._result}>\n        <label>\n          <input type=\"number\" name=\"chapterNum\" required=\"required\" />장\n        </label>\n        <label>\n          <input type=\"number\" name=\"verseStart\" required=\"required\" />절 부터\n        </label>\n        <label>\n          <input type=\"number\" name=\"verseEnd\" required=\"required\" />절 까지\n        </label>\n        <input type=\"submit\" value=\"보기\" />\n      </form>\n    );\n  };\n\n  _result = async event => {\n    event.preventDefault();\n    const formData = new FormData(event.target);\n    var bnum = (this.state.book % 39) - 1;\n    bnum = bnum < 0 ? bnum + 39 : bnum;\n    var cnum = formData.get(\"chapterNum\");\n    var vsnum = formData.get(\"verseStart\");\n    var venum = formData.get(\"verseEnd\");\n\n    var maxChapter = Object.keys(this.state.data[bnum].book).length;\n    if (cnum <= 0) {\n      alert(\"올바르지 않은 입력입니다.\");\n      return;\n    }\n    var maxVerse = Object.keys(this.state.data[bnum].book[cnum].chapter).length;\n    if (vsnum <= 0 || vsnum > venum) {\n      alert(\"올바르지 않은 입력입니다.\");\n      return;\n    }\n\n    var temp = [];\n    if(cnum > maxChapter){\n      vsnum = maxChapter;\n    }\n    if (venum > maxVerse) {\n      venum = maxVerse;\n    }\n    for (var i = vsnum; i <= venum; ++i) {\n      temp.push(this.state.data[bnum].book[cnum].chapter[i]);\n    }\n    this.setState({\n      chapter: cnum,\n      verseS: vsnum,\n      verseE: venum,\n      verseData: temp,\n      view: true\n    });\n  };\n\n  _words = () => {\n    const items = this.state.verseData.map(temp => {\n      return (\n        <div key={temp.verse_nr * 100}>\n          {temp.verse_nr}. {temp.verse}\n        </div>\n      );\n    });\n    return items;\n  };\n\n  _copyData = () => {\n    var copyText = document.querySelector(\".verseDisplay\");\n    var selection = window.getSelection();\n    var range = document.createRange();\n    range.selectNodeContents(copyText);\n    selection.removeAllRanges();\n    selection.addRange(range);\n    document.execCommand(\"Copy\");\n    alert(\"클립보드에 복사 되었습니다!\");\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <button id=\"ot\" onClick={this._loadingOT}>\n          구약\n        </button>\n        <button id=\"nt\" onClick={this._loagingNT}>\n          신약\n        </button>\n        <div className=\"books\">\n          {this.state.data.length !== 0 ? this._displayData() : null}\n          {this.state.book !== 0 ? this._chapterVerse() : null}\n        </div>\n        {this.state.view ? (<button id=\"copy\" onClick={this._copyData}>전체복사</button>) : null}\n        <div className=\"verseDisplay\">\n          <br />\n          {this._words()}\n          {this.state.view ? (<p id=\"info\">{this.state.bookName} {this.state.chapter}:{this.state.verseS}~{this.state.verseE} KRV</p>) : null}\n          <br/><br/>\n        </div>\n        <p>성경본문은 getbible.net에서 개역한글판을 가져왔으며 오류 및 수정은 jungdw0624@gmail.com으로 알려주시기 바랍니다.</p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}